/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type OriginStruct = {
  srcEid: BigNumberish;
  sender: BytesLike;
  nonce: BigNumberish;
};

export type OriginStructOutput = [
  srcEid: bigint,
  sender: string,
  nonce: bigint
] & { srcEid: bigint; sender: string; nonce: bigint };

export type MessagingFeeStruct = {
  nativeFee: BigNumberish;
  lzTokenFee: BigNumberish;
};

export type MessagingFeeStructOutput = [
  nativeFee: bigint,
  lzTokenFee: bigint
] & { nativeFee: bigint; lzTokenFee: bigint };

export type MessagingReceiptStruct = {
  guid: BytesLike;
  nonce: BigNumberish;
  fee: MessagingFeeStruct;
};

export type MessagingReceiptStructOutput = [
  guid: string,
  nonce: bigint,
  fee: MessagingFeeStructOutput
] & { guid: string; nonce: bigint; fee: MessagingFeeStructOutput };

export declare namespace Root {
  export type TokenStruct = {
    tokenType: BigNumberish;
    tokenAddress: BytesLike;
    tokenId: BigNumberish;
    amount: BigNumberish;
  };

  export type TokenStructOutput = [
    tokenType: bigint,
    tokenAddress: string,
    tokenId: bigint,
    amount: bigint
  ] & {
    tokenType: bigint;
    tokenAddress: string;
    tokenId: bigint;
    amount: bigint;
  };

  export type OrderStruct = {
    user: BytesLike;
    recipient: BytesLike;
    filler: BytesLike;
    inputs: Root.TokenStruct[];
    outputs: Root.TokenStruct[];
    sourceChainEid: BigNumberish;
    destinationChainEid: BigNumberish;
    sponsored: boolean;
    primaryFillerDeadline: BigNumberish;
    deadline: BigNumberish;
    callRecipient: BytesLike;
    callData: BytesLike;
    callValue: BigNumberish;
  };

  export type OrderStructOutput = [
    user: string,
    recipient: string,
    filler: string,
    inputs: Root.TokenStructOutput[],
    outputs: Root.TokenStructOutput[],
    sourceChainEid: bigint,
    destinationChainEid: bigint,
    sponsored: boolean,
    primaryFillerDeadline: bigint,
    deadline: bigint,
    callRecipient: string,
    callData: string,
    callValue: bigint
  ] & {
    user: string;
    recipient: string;
    filler: string;
    inputs: Root.TokenStructOutput[];
    outputs: Root.TokenStructOutput[];
    sourceChainEid: bigint;
    destinationChainEid: bigint;
    sponsored: boolean;
    primaryFillerDeadline: bigint;
    deadline: bigint;
    callRecipient: string;
    callData: string;
    callValue: bigint;
  };
}

export interface OrderSpokeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_RESOLUTION"
      | "MAX_RETURNDATA_COPY_SIZE"
      | "allowInitializePath"
      | "endpoint"
      | "estimateBridgingFee"
      | "executor"
      | "fee"
      | "fillOrder"
      | "getOrderId"
      | "isComposeMsgSender"
      | "lzReceive"
      | "nextNonce"
      | "oAppVersion"
      | "orders"
      | "owner"
      | "peers"
      | "renounceOwnership"
      | "setDelegate"
      | "setFee"
      | "setPeer"
      | "sweep"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeUpdated"
      | "OrderFilled"
      | "OwnershipTransferred"
      | "PeerSet"
      | "PendingOrderReceived"
      | "TokenSweep"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_RESOLUTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_RETURNDATA_COPY_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowInitializePath",
    values: [OriginStruct]
  ): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimateBridgingFee",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [Root.OrderStruct, BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderId",
    values: [Root.OrderStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isComposeMsgSender",
    values: [OriginStruct, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [OriginStruct, BytesLike, BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextNonce",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oAppVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "orders", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "peers", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeer",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [BigNumberish, BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_RESOLUTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_RETURNDATA_COPY_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowInitializePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateBridgingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrderId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isComposeMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oAppVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderFilledEvent {
  export type InputTuple = [
    orderId: BytesLike,
    order: Root.OrderStruct,
    caller: AddressLike,
    receipt: MessagingReceiptStruct
  ];
  export type OutputTuple = [
    orderId: string,
    order: Root.OrderStructOutput,
    caller: string,
    receipt: MessagingReceiptStructOutput
  ];
  export interface OutputObject {
    orderId: string;
    order: Root.OrderStructOutput;
    caller: string;
    receipt: MessagingReceiptStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PeerSetEvent {
  export type InputTuple = [eid: BigNumberish, peer: BytesLike];
  export type OutputTuple = [eid: bigint, peer: string];
  export interface OutputObject {
    eid: bigint;
    peer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PendingOrderReceivedEvent {
  export type InputTuple = [orderId: BytesLike, spokeEid: BigNumberish];
  export type OutputTuple = [orderId: string, spokeEid: bigint];
  export interface OutputObject {
    orderId: string;
    spokeEid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSweepEvent {
  export type InputTuple = [
    tokenType: BigNumberish,
    tokenId: BigNumberish,
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    tokenType: bigint,
    tokenId: bigint,
    token: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    tokenType: bigint;
    tokenId: bigint;
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OrderSpoke extends BaseContract {
  connect(runner?: ContractRunner | null): OrderSpoke;
  waitForDeployment(): Promise<this>;

  interface: OrderSpokeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_RESOLUTION: TypedContractMethod<[], [bigint], "view">;

  MAX_RETURNDATA_COPY_SIZE: TypedContractMethod<[], [bigint], "view">;

  allowInitializePath: TypedContractMethod<
    [origin: OriginStruct],
    [boolean],
    "view"
  >;

  endpoint: TypedContractMethod<[], [string], "view">;

  estimateBridgingFee: TypedContractMethod<
    [dstEid: BigNumberish, payload: BytesLike, options: BytesLike],
    [bigint],
    "view"
  >;

  executor: TypedContractMethod<[], [string], "view">;

  fee: TypedContractMethod<[], [bigint], "view">;

  fillOrder: TypedContractMethod<
    [
      order: Root.OrderStruct,
      orderNonce: BigNumberish,
      fundingWallet: BytesLike,
      maxGas: BigNumberish,
      options: BytesLike
    ],
    [MessagingReceiptStructOutput],
    "payable"
  >;

  getOrderId: TypedContractMethod<
    [order: Root.OrderStruct, nonce: BigNumberish],
    [string],
    "view"
  >;

  isComposeMsgSender: TypedContractMethod<
    [arg0: OriginStruct, arg1: BytesLike, _sender: AddressLike],
    [boolean],
    "view"
  >;

  lzReceive: TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: AddressLike,
      _extraData: BytesLike
    ],
    [void],
    "payable"
  >;

  nextNonce: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [bigint],
    "view"
  >;

  oAppVersion: TypedContractMethod<
    [],
    [[bigint, bigint] & { senderVersion: bigint; receiverVersion: bigint }],
    "view"
  >;

  orders: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  peers: TypedContractMethod<[eid: BigNumberish], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDelegate: TypedContractMethod<
    [_delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;

  setPeer: TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [void],
    "nonpayable"
  >;

  sweep: TypedContractMethod<
    [
      tokenType: BigNumberish,
      tokenId: BigNumberish,
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_RESOLUTION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_RETURNDATA_COPY_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowInitializePath"
  ): TypedContractMethod<[origin: OriginStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "endpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "estimateBridgingFee"
  ): TypedContractMethod<
    [dstEid: BigNumberish, payload: BytesLike, options: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "executor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fillOrder"
  ): TypedContractMethod<
    [
      order: Root.OrderStruct,
      orderNonce: BigNumberish,
      fundingWallet: BytesLike,
      maxGas: BigNumberish,
      options: BytesLike
    ],
    [MessagingReceiptStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getOrderId"
  ): TypedContractMethod<
    [order: Root.OrderStruct, nonce: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isComposeMsgSender"
  ): TypedContractMethod<
    [arg0: OriginStruct, arg1: BytesLike, _sender: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lzReceive"
  ): TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: AddressLike,
      _extraData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "nextNonce"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "oAppVersion"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { senderVersion: bigint; receiverVersion: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "orders"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "peers"
  ): TypedContractMethod<[eid: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDelegate"
  ): TypedContractMethod<[_delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPeer"
  ): TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sweep"
  ): TypedContractMethod<
    [
      tokenType: BigNumberish,
      tokenId: BigNumberish,
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OrderFilled"
  ): TypedContractEvent<
    OrderFilledEvent.InputTuple,
    OrderFilledEvent.OutputTuple,
    OrderFilledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PeerSet"
  ): TypedContractEvent<
    PeerSetEvent.InputTuple,
    PeerSetEvent.OutputTuple,
    PeerSetEvent.OutputObject
  >;
  getEvent(
    key: "PendingOrderReceived"
  ): TypedContractEvent<
    PendingOrderReceivedEvent.InputTuple,
    PendingOrderReceivedEvent.OutputTuple,
    PendingOrderReceivedEvent.OutputObject
  >;
  getEvent(
    key: "TokenSweep"
  ): TypedContractEvent<
    TokenSweepEvent.InputTuple,
    TokenSweepEvent.OutputTuple,
    TokenSweepEvent.OutputObject
  >;

  filters: {
    "FeeUpdated(uint256,uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "OrderFilled(bytes32,tuple,address,tuple)": TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;
    OrderFilled: TypedContractEvent<
      OrderFilledEvent.InputTuple,
      OrderFilledEvent.OutputTuple,
      OrderFilledEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PeerSet(uint32,bytes32)": TypedContractEvent<
      PeerSetEvent.InputTuple,
      PeerSetEvent.OutputTuple,
      PeerSetEvent.OutputObject
    >;
    PeerSet: TypedContractEvent<
      PeerSetEvent.InputTuple,
      PeerSetEvent.OutputTuple,
      PeerSetEvent.OutputObject
    >;

    "PendingOrderReceived(bytes32,uint32)": TypedContractEvent<
      PendingOrderReceivedEvent.InputTuple,
      PendingOrderReceivedEvent.OutputTuple,
      PendingOrderReceivedEvent.OutputObject
    >;
    PendingOrderReceived: TypedContractEvent<
      PendingOrderReceivedEvent.InputTuple,
      PendingOrderReceivedEvent.OutputTuple,
      PendingOrderReceivedEvent.OutputObject
    >;

    "TokenSweep(uint8,uint256,address,address,uint256)": TypedContractEvent<
      TokenSweepEvent.InputTuple,
      TokenSweepEvent.OutputTuple,
      TokenSweepEvent.OutputObject
    >;
    TokenSweep: TypedContractEvent<
      TokenSweepEvent.InputTuple,
      TokenSweepEvent.OutputTuple,
      TokenSweepEvent.OutputObject
    >;
  };
}
